{
    "contents" : "# detach(\"package:Gviz\", unload=TRUE) # this is to keep RStudio happy - run if loading app more than once in same session - keep commented out otherwise\n                                    # if load Gviz 2x in same session (i.e. close & re-run app), get \"object of type 'closure' is not subsettable\" error\n                                    # should not be an issue when running app from the website\n                                             \nlibrary(shiny)\nlibrary(dplyr)\nlibrary(data.table)\nlibrary(forestplot) #needed\nlibrary(lattice)\nlibrary(stringr)\nlibrary(RColorBrewer)\nlibrary(viridis) #needed\nlibrary(DT) #needed\nlibrary(Gviz) #needed\n\n# load dataset descriptions\nDataset_Info <- read.csv(\"../databases/microarray_data_infosheet_R.csv\")\nDataset_Info$Unique_ID <- apply(Dataset_Info[, c(\"GEO_ID\", \"Tissue\", \"Asthma\")], 1, paste, collapse=\"_\")\n\n#load and name datasets\nfor (i in Dataset_Info$Unique_ID) {\n    assign(i, fread(paste0(\"../databases/microarray_results/\", i,\".csv\"), sep=\",\"))}\nDataset_Info[is.na(Dataset_Info$PMID),\"PMID\"] <- \"\"\n\ntfbs <- fread(\"../databases/tfbs_for_app.txt\", header = TRUE, stringsAsFactors = FALSE) #TFBS data from ENCODE - matched to gene ids using bedtools\nsnp <- fread(\"../databases/grasp_output_for_app.txt\", header = TRUE, stringsAsFactors = FALSE) #SNP data from GRASP - matched to gene ids using bedtools\ngene_locations <- fread(\"../databases/gene_positions.txt\", header = TRUE, stringsAsFactors = FALSE) #gene location & transcript data from GENCODE\n\n#color tfbs based on binding score - used in tracks\n#create color scheme based on values tfbs binding score & snp p-values\ngetPalette = colorRampPalette(brewer.pal(9, \"Blues\"))\ntfbs$color <- getPalette(50)[as.numeric(cut(tfbs$score,breaks = 50))]\nsnp$color <- getPalette(1024)[as.numeric(cut(-snp$p,breaks = 1024))]\n\n#for SNP annotations\nsnp$pval_annot <- snp$snp\n\n# make a list of gene symbols in all datasets for checking whether gene symbol entered is valid - used for GeneSymbol later on\ngenes_avail <- vector()\nfor (i in ls()[grep(\"GSE\", ls())]) {genes_avail <- unique(c(genes_avail, get(i)$SYMBOL))}\n\noutput.table <- data.frame() # initiate output table - used later in output.tableforplot()\nheatmap_colors <-  inferno # heatmap colors - used in p-value plot\n\n# server\nshinyServer(function(input, output, session) {\n  \n  curr_gene <- reactive({gsub(\" \", \"\", toupper(input$curr_gene), fixed = TRUE)}) #can recognize gene names even if typed lowercase\n                                                                                 #also removes any spaces\n  GeneSymbol <- reactive({if (curr_gene() %in% genes_avail) {TRUE} else {FALSE}})  #used later to generate error message when a wrong gene symbol is input\n  \n  ##############################################\n  ## \"Select all\" button for tissue selection ##\n  ##############################################\n  checkbox_choices <- c(\"Bronchial epithelium\"=\"BE\",\"Lens epithelial cell\" = \"LEC\",\n                        \"Nasal epithelium\"=\"NE\",\"CD4\"=\"CD4\",\"CD8\"=\"CD8\",\"PBMC\"=\"PBMC\",\"White blood cell\"=\"WBC\", \"Airway smooth muscle\"=\"ASM\",\n                        \"BAL\"=\"BAL\", \"Whole lung\"=\"Lung\",\"Lymphoblastic leukemia cell\" = \"chALL\",\"MCF10A-Myc\" = \"MCF10A-Myc\",\n                        \"Macrophage\" = \"MACRO\",\"Osteosarcoma U2OS cell\" = \"U2O\", \"Lymphoblastoid cell\" = \"LCL\")\n  observe({\n      if(input$selectall == 0) return(NULL) \n      else if (input$selectall%%2 == 0)\n      {updateCheckboxGroupInput(session,\"Tissue\",\"Tissue\",choices=checkbox_choices)}\n      else\n      {updateCheckboxGroupInput(session,\"Tissue\",\"Tissue\",choices=checkbox_choices,selected=c(\"BE\", \"LEC\", \"NE\", \"CD4\", \"CD8\", \"PBMC\", \"WBC\", \"ASM\", \"BAL\", \"Lung\",\n                                                                                                 \"chALL\", \"MCF10A-Myc\", \"MACRO\", \"U2O\", \"LCL\"))}})\n  #######################\n  ## GEO studies table ##\n  #######################\n  #select GEO studies matching desired conditions;\n  #Jessica's initial app had an \"and\" condition here; I changed it to \"or\"\n  UserDataset_Info <- reactive({\n      Dataset_Info1 = subset(Dataset_Info,(((Dataset_Info$Tissue %in% input$Tissue) | (Dataset_Info$Asthma %in% input$Asthma)) & Dataset_Info$App == \"asthma\")) \n      Dataset_Info2 = subset(Dataset_Info, ((Dataset_Info$Tissue %in% input$Tissue) & (Dataset_Info$App %in% input$GC_included))) \n      Dataset_Info = rbind(Dataset_Info1, Dataset_Info2)}) # this separates GC and asthma data \n  \n  #add links for GEO_ID and PMID\n  GEO_data <- reactive({\n      validate(need(nrow(UserDataset_Info()) != 0, \"Please choose at least one dataset.\")) #Generate a error message when no data is loaded.\n     \n       UserDataset_Info() %>%\n          dplyr::mutate(GEO_ID_link = paste0(\"http://www.ncbi.nlm.nih.gov/gquery/?term=\", GEO_ID),\n             PMID_link = paste0(\"http://www.ncbi.nlm.nih.gov/pubmed/?term=\", PMID))})\n    \n  Dataset <- reactive({paste0(\"<a href='\",  GEO_data()$GEO_ID_link, \"' target='_blank'>\",GEO_data()$GEO_ID,\"</a>\")})\n  PMID <- reactive({paste0(\"<a href='\",  GEO_data()$PMID_link, \"' target='_blank'>\",GEO_data()$PMID,\"</a>\")})\n  Description <- reactive({GEO_data()$Description})\n  \n  GEO_links <- reactive({\n      df <- data.frame(Dataset(), PMID(), Description())\n      colnames(df) <- c(\"Dataset\", \"PMID\", \"Description\")\n      df})\n  \n  output$GEO_table <- DT::renderDataTable(GEO_links(),  \n                                                     class = 'cell-border stripe', \n                                                     rownames = FALSE, \n                                                     options = list(paging = FALSE, searching = FALSE),\n                                                     escape=FALSE)\n  \n  #########################################\n  ## Select GEO data for plots and table ##\n  #########################################\n\n  #select and modify data used for plots and accompanying table\n  output.tableforplot <- reactive({\n      validate(need(nrow(UserDataset_Info()) != 0, \"Please choose at least one dataset.\")) #Generate a error message when no data is loaded.\n      validate(need(curr_gene() != \"\", \"Please enter a gene id\")) #Generate a error message when no gene id is input.\n      \n  #select data for the gene currently selected\n  data_filter <- function(x){\n      x %>%\n          dplyr::filter(SYMBOL==curr_gene()) %>%\n          dplyr::select(logFC, P.Value, adj.P.Val,t) %>% \n          dplyr::filter(P.Value==min(P.Value)) %>%\n          dplyr::mutate(lower = logFC - 2* (logFC/t), upper = logFC + 2*(logFC/t))}\n     \n  #get data for given gene for each study selected\n  for (i in UserDataset_Info()$Unique_ID){\n      curr.gene.data=get(i,environment()) \n      data_type = UserDataset_Info() %>% dplyr::filter(Unique_ID == i) %>% select(App) #This 'data_type' can be used to separate asthma and GC data. \n          \n    if(any(tbl_vars(curr.gene.data)==\"qValuesBatch\")) {\n        curr.gene.data <- (curr.gene.data %>%\n                               dplyr::select(-P.Value,-adj.P.Val) %>%\n                               dplyr::rename(P.Value=pValuesBatch) %>%\n                               dplyr::rename(adj.P.Val=qValuesBatch))}\n      \n    #use data_filter function from above to filter curr.gene.data\n    if (any(GeneSymbol())) {\n        \n        curr.gene.data <- data_filter(curr.gene.data)\n        \n        if(nrow(curr.gene.data) > 0) {\n            curr.gene.data <- cbind(data_type, Unique_ID=i, curr.gene.data)\n            #append curr.gene.data to all the other data that needs to be included in the levelplots\n            output.table <- rbind(output.table, curr.gene.data)}}}\n  \n    #preparing the data for levelplots\n    #calculate the fold change, order by fold change for levelplots\n  validate(need(GeneSymbol() != FALSE, \"Please enter a valid gene id.\")) # Generate error message if the gene symbol is not right.\n  output.table <- dplyr::mutate(output.table, Fold_Change=2^(logFC), neglogofP=(-log10(adj.P.Val)), Lower_bound_CI = 2^(lower), Upper_bound_CI = 2^(upper)) #note that this is taking -log10 of adjusted p-value\n  row.names(output.table) <- output.table$Unique_ID #crucial for plot labels on levelplot\n  output.table <- output.table[order(output.table$Fold_Change),]})\n  \n\n  ###################################\n  ## Data table accompanying plots ##\n  ###################################\n  \n  # asthma\n  data_Asthma <- reactive({ output.tableforplot_asthma = output.tableforplot() \n  output.tableforplot_asthma = output.tableforplot_asthma[output.tableforplot_asthma$App == \"asthma\",]\n  output.tableforplot_asthma[rev(rownames(output.tableforplot_asthma)),]})\n  \n  data2_Asthma <- reactive({\n      data_Asthma()%>%\n          dplyr::select(Unique_ID, adj.P.Val, P.Value,Fold_Change, neglogofP, Lower_bound_CI, Upper_bound_CI) %>%\n          dplyr::mutate(Fold_Change=round(Fold_Change,digits=2),adj.P.Val=format(adj.P.Val, scientific=TRUE, digits=3), P.Value =format(P.Value, scientific=TRUE, digits=3), \n                        Lower_bound_CI = round(Lower_bound_CI, digits = 2), Upper_bound_CI = round(Upper_bound_CI, digits = 2), Comparison = \"Asthma vs. non-asthma\")%>%\n          dplyr::rename(`Study ID`=Unique_ID, `P Value`=P.Value, `Q Value`=adj.P.Val, `Fold Change`=Fold_Change)})\n  \n  tableforgraph_Asthma <- reactive(data2_Asthma()%>% \n                                       dplyr::mutate(`Fold Change(95% CI)` = paste(`Fold Change`, \" \",\"(\", Lower_bound_CI, \",\", Upper_bound_CI, \")\", sep = \"\")) %>%\n                                       dplyr::select(`Study ID`, `Comparison`, `P Value`, `Q Value`, `Fold Change(95% CI)`))\n  # GC\n  data_GC <- reactive({ output.tableforplot_GC = output.tableforplot()\n  output.tableforplot_GC = output.tableforplot_GC[output.tableforplot_GC$App == \"GC\",]\n  output.tableforplot_GC[rev(rownames(output.tableforplot_GC)),]})\n  \n  data2_GC <- reactive({\n      data_GC()%>%\n          dplyr::select(Unique_ID, adj.P.Val, P.Value, Fold_Change, neglogofP, Lower_bound_CI, Upper_bound_CI) %>%\n          dplyr::mutate(Fold_Change=round(Fold_Change,digits=2),adj.P.Val=format(adj.P.Val, scientific=TRUE, digits=3), P.Value =format(P.Value, scientific=TRUE, digits=3), \n                 Lower_bound_CI = round(Lower_bound_CI, digits = 2), Upper_bound_CI = round(Upper_bound_CI, digits = 2), Comparison = \"Glucocorticoid vs. control\")%>%\n          dplyr::rename(`Study ID`=Unique_ID, `P Value`=P.Value, `Q Value`=adj.P.Val, `Fold Change`=Fold_Change)})\n  \n  tableforgraph_GC <- reactive(data2_GC()%>% \n                                   dplyr::mutate(`Fold Change(95% CI)` = paste(`Fold Change`, \" \",\"(\", Lower_bound_CI, \",\", Upper_bound_CI, \")\", sep = \"\")) %>%\n                                   dplyr::select(`Study ID`, `Comparison`, `P Value`, `Q Value`, `Fold Change(95% CI)`))\n  #combine asthma & GC into one\n  output$tableforgraph <- DT::renderDataTable(rbind(tableforgraph_Asthma(), tableforgraph_GC()),\n                                                 class = 'cell-border stripe', \n                                                 rownames = FALSE, \n                                                 options = list(paging = FALSE, searching = FALSE),\n                                                 width = \"100%\")\n  #################\n  ## Forestplots ##\n  #################\n  \n  #asthma forestplot\n  forestplot_asthma <- function(){\n      data2_Asthma = data2_Asthma()\n      validate(need(nrow(data2_Asthma) != 0, \"Please choose a dataset.\")) #Generate the user-friendly error message\n      \n      text_asthma = data2_Asthma$`Study ID`\n\n      xticks = seq(from = min(0.9, min(data2_Asthma$Lower_bound_CI)), to = max(max(data2_Asthma$Upper_bound_CI),1.2), length.out = 5)\n      forestplot(as.vector(text_asthma), title = \"Asthma vs. Non-asthma\", data2_Asthma[,c(\"Fold Change\",\"Lower_bound_CI\",\"Upper_bound_CI\")], zero = 1, \n                 xlab = \"Fold Change\",ylab = \"Studies\", boxsize = 0.2, col = fpColors(lines = \"navyblue\", box = \"royalblue\", zero = \"lightgrey\"), lwd.ci = 2, \n                 xticks = xticks, lineheight = unit((22.5/nrow(data2_Asthma)), \"cm\"), graphwidth = unit(4.5, \"cm\"),mar = unit(c(0,0,0,0),\"mm\"),\n                 txt_gp = fpTxtGp(xlab = gpar(cex = 1.35), ticks = gpar(cex = 1.2), title = gpar(cex = 1.2)))}\n  #GC forestplot\n  forestplot_GC <- function(){\n      data2_GC = data2_GC()\n      validate(need(nrow(data2_GC) != 0, \"Please choose a dataset.\"))\n          \n      text_GC = data2_GC$`Study ID`\n\n      xticks = seq(from = min(min(0.9, data2_GC$Lower_bound_CI)), to = max(max(data2_GC$Upper_bound_CI),1.2), length.out = 5)\n      forestplot(as.vector(text_GC), title = \"Glucocorticoid vs. Control\", data2_GC[,c(\"Fold Change\",\"Lower_bound_CI\",\"Upper_bound_CI\")] ,zero = 1, \n                       xlab = \"Fold Change\",ylab = \"Studies\", boxsize = 0.15, col = fpColors(lines = \"navyblue\", box = \"royalblue\", zero = \"lightgrey\"), lwd.ci = 2,\n                       xticks = xticks, lineheight = unit((22.5/nrow(data2_GC)), \"cm\"), graphwidth = unit(4.5, \"cm\"),mar = unit(c(0,0,0,0),\"mm\"),\n                       txt_gp = fpTxtGp(xlab = gpar(cex = 1.35), ticks = gpar(cex = 1.2), title = gpar(cex = 1.2)))}\n  \n  output$forestplot_asthma = renderPlot(forestplot_asthma())\n  output$forestplot_GC = renderPlot(forestplot_GC())\n  \n  #######################\n  ## p-value levelplot ##\n  #######################\n\n  #to separate asthma & GC in p-value plot, initially have each set of data separately, then combine to plot\n  \n  #asthma data\n  data3_Asthma <- reactive({\n      temp_asthma <- data_Asthma()\n      temp_asthma$neglogofP[which(temp_asthma$neglogofP > 8)] <- 8\n      temp_asthma <- as.data.frame(temp_asthma)\n      temp_asthma[rev(rownames(temp_asthma)),] #do this last - any operation makes it revert to default order: sorted by increasing fold change; we want decreasing\n      }) \n  \n  output.tableforplot2_asthma <- reactive({data3_Asthma() %>% dplyr::rename(' '=Fold_Change, ' '=neglogofP)})\n  heatmapMAT_asthma <- reactive({output.tableforplot2_asthma()})\n  pval_data_asthma <- reactive({t(heatmapMAT_asthma()[10])}) \n  \n  #GC data\n  data3_GC <- reactive({\n      temp_GC <- data_GC()\n      temp_GC$neglogofP[which(temp_GC$neglogofP > 8)] <- 8\n      temp_GC <- as.data.frame(temp_GC)\n      temp_GC[rev(rownames(temp_GC)),] #do this last - any operation makes it revert to default order: sorted by increasing fold change; we want decreasing\n      }) \n  \n  output.tableforplot2_GC <- reactive({data3_GC() %>% dplyr::rename(' '=Fold_Change, ' '=neglogofP)})\n  heatmapMAT_GC <- reactive({output.tableforplot2_GC()})\n  pval_data_GC <- reactive({t(heatmapMAT_GC()[10])}) \n  \n  # levelplot for log p-value - combines asthma and GC data\n  pval_plot <- function() {\n      levelplot(cbind(pval_data_GC(), pval_data_asthma()),\n                col.regions=heatmap_colors,\n                xlab = NULL,\n                ylab = NULL,\n                main = \"-log10(adjusted p-value)\",\n                pretty = FALSE,\n                aspect = 2,\n                width = 3,\n                scales=list(x=list(cex=1, tck = c(0,0,0,0)),\n                            y=list(cex=1, tck = c(1,0,0,0))),\n                at=seq(0,8,length.out=100))}\n  \n  output$pval_plot_outp <- renderPlot({pval_plot()})\n  \n  ###############################\n  ## Gene, SNP and TFBS tracks ##\n  ###############################\n  \n  #filter data for selected gene\n  gene_subs <- reactive({\n      gene_subs_temp <- unique(filter(gene_locations, symbol==curr_gene()))\n      gene_subs_temp <- gene_subs_temp[!(duplicated(gene_subs_temp$exon)),]})\n  tfbs_subs <- reactive({unique(filter(tfbs, symbol==curr_gene()))})\n  snp_subs <- reactive({unique(filter(snp, symbol==curr_gene()))})\n  \n    gene_tracks <- function() {\n      validate(need(curr_gene() != \"\", \"Please enter a gene id\")) #Generate a error message when no gene id is input.\n      validate(need(GeneSymbol() != FALSE, \"Please enter a valid gene id.\")) # Generate error message if the gene symbol is not right.\n      validate(need(nrow(UserDataset_Info()) != 0, \"Please choose at least one dataset.\")) #Generate a error message when no data is loaded.\n      \n      gene_subs <- gene_subs()\n      tfbs_subs <- tfbs_subs()\n      snp_subs <- snp_subs()\n\n      #constant for all tracks\n      gen <- \"hg19\"\n      chr <- unique(gene_subs$chromosome)\n      \n      #chromosome, axis and gene - these tracks show up for all genes\n      chrom_track <- IdeogramTrack(genome = gen, chromosome = chr) \n      axis_track <- GenomeAxisTrack()\n      gene_track <- Gviz::GeneRegionTrack(gene_subs, genome = gen, chromosome = chr, name = \"Transcripts\", transcriptAnnotation=\"transcript\", fill = \"royalblue\")\n      \n      #tfbs and snp track - only present for some genes\n      if (nrow(tfbs_subs) > 0) {tfbs_track <- Gviz::AnnotationTrack(tfbs_subs, name=\"GR binding\", fill = tfbs_subs$color, group = \" \")}\n      if (nrow(snp_subs) > 0) {\n          snp_track <- Gviz::AnnotationTrack(snp_subs, name=\"SNPs\", fill = snp_subs$color, group=snp_subs$pval_annot)\n          \n          #rough estimate of number of stacks there will be in SNP track - for track scaling\n          if (nrow(snp_subs) > 1) {\n              snp_subs_temp <- snp_subs\n              snp_range <- max(snp_subs_temp$start) - min(snp_subs_temp$start)\n              snp_subs_temp$start_prev <- c(0, snp_subs_temp$start[1:(nrow(snp_subs_temp)-1)]) \n              snp_subs_temp$dist <- as.numeric(snp_subs_temp$start) - as.numeric(snp_subs_temp$start_prev)\n              snp_size_init <- 2 + as.numeric(nrow(snp_subs[which(snp_subs$dist < snp_range/10),])/2) + 0.8*length(unique(gene_subs$transcript))\n          } else {snp_size_init <- 1.2 + 0.05*length(unique(gene_subs$transcript)) + 0.015*nrow(snp_subs)}\n      } else {snp_size_init <- 1.2 + 0.05*length(unique(gene_subs$transcript)) + 0.015*nrow(snp_subs)}\n\n      #track sizes - defaults throw off scaling as more tracks are added\n       chrom_size <- 1.2 + 0.01*length(unique(gene_subs$transcript)) + 0.01*nrow(snp_subs) \n       axis_size <- 1 + 0.05*length(unique(gene_subs$transcript)) + 0.015*nrow(snp_subs)\n       gene_size <- 2 + 0.6*length(unique(gene_subs$transcript)) + 0.015*nrow(snp_subs)\n       tfbs_size <- 2 + 0.075*length(unique(gene_subs$transcript)) + 0.015*nrow(snp_subs)\n       snp_size <- snp_size_init #from above\n       \n      #output depends on whether there are TFBS and/or SNPs for a given gene    \n      if ((nrow(tfbs_subs) > 0) & (nrow(snp_subs) > 0)) {\n          plotTracks(list(chrom_track, axis_track, gene_track, tfbs_track, snp_track), sizes=c(chrom_size,axis_size,gene_size,tfbs_size, snp_size), col=NULL, background.panel = \"#d3cecc\", background.title = \"firebrick4\", col.border.title = \"firebrick4\", groupAnnotation = \"group\", fontcolor.group = \"darkblue\", cex.group=0.75, just.group=\"below\", cex.title=1.1)\n      } else if (nrow(tfbs_subs) > 0) {\n          plotTracks(list(chrom_track, axis_track, gene_track, tfbs_track), sizes=c(chrom_size,axis_size,gene_size,tfbs_size), col=NULL,  background.panel = \"#d3cecc\", background.title = \"firebrick4\", col.border.title = \"firebrick4\", groupAnnotation = \"group\", fontcolor.group = \"darkblue\", cex.group=0.75, just.group=\"below\", cex.title=1.1)\n      } else if (nrow(snp_subs) > 0) {\n          plotTracks(list(chrom_track, axis_track, gene_track, snp_track), sizes=c(chrom_size,axis_size,gene_size,snp_size), col=NULL, background.panel = \"#d3cecc\", background.title = \"firebrick4\", col.border.title = \"firebrick4\", groupAnnotation = \"group\", fontcolor.group = \"darkblue\", cex.group=0.75, just.group=\"below\", cex.title=1.1)\n      } else {\n          plotTracks(list(chrom_track, axis_track, gene_track), sizes=c(chrom_size,axis_size,gene_size), col=NULL, background.panel = \"#d3cecc\", background.title = \"firebrick4\", col.border.title = \"firebrick4\", groupAnnotation = \"group\", fontcolor.group = \"darkblue\", cex.group=0.75, just.group=\"below\", cex.title=1.1)\n      } \n  }\n     #plot height increases if more tracks are displayed\n     observe({output$gene_tracks_outp2 <- renderPlot({gene_tracks()}, height=400 + 15*length(unique(gene_subs()$transcript)) + 10*(nrow(snp_subs())), width=1600)})\n    \n  ######################\n  ## Download buttons ##\n  ######################\n  graphgene=reactive({curr_gene()})\n    \n  output$asthma_fc_download <- downloadHandler(\n    filename= function(){paste0(\"fold_change_asthma_\", graphgene(), \"_\", Sys.Date(), \".png\")},\n    content=function(file){\n      png(file, width=6, height=9, units=\"in\", res=600)\n      forestplot_asthma()\n      dev.off()})\n  \n  output$GC_fc_download <- downloadHandler(\n      filename= function(){paste0(\"fold_change_GC_\", graphgene(), \"_\", Sys.Date(), \".png\")},\n      content=function(file){\n          png(file, width=6, height=9, units=\"in\", res=600)\n          forestplot_GC()\n          dev.off()})\n  \n  output$pval_download <- downloadHandler(\n      filename= function(){paste0(\"-log(pval)_heatmap_\", graphgene(), \"_\", Sys.Date(), \".png\")},\n      content=function(file){\n          png(file, width=12, height=18, units=\"in\", res=600)\n          print(pval_plot()) # note that for this one, unlike other plot downloads, had to use print(). \n          dev.off()})        # else the download is a blank file. this seems to be b/c pval_plot() creates a graph \n                             # object but doesn't draw the plot, as per \n                             # http://stackoverflow.com/questions/27008434/downloading-png-from-shiny-r-pt-2\n       \n  output$gene_tracks_download <- downloadHandler(\n      filename= function(){paste0(\"gene_tracks_\", graphgene(), \"_\", Sys.Date(), \".png\")},\n      content=function(file){\n          png(file, width=16, height=12, units=\"in\", res=600)\n          gene_tracks()\n          dev.off()})\n  \n  output$table_download <- downloadHandler(filename = function() {paste0('Asthma&GC_data_summary_table_',graphgene(), Sys.Date(), '.csv')},\n                                                  content = function(file) {write.csv(rbind(tableforgraph_Asthma(), tableforgraph_GC()), file, row.names=FALSE)})\n})",
    "created" : 1476488901682.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3277306816",
    "id" : "2178BDEE",
    "lastKnownWriteTime" : 1476488801,
    "path" : "~/realgar/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "type" : "r_source"
}